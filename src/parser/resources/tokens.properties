tokens=liststart,listend,constant,variable,sum,difference,product,div,remainder,minus,random,and,equal,greater,less,not,notequal,or,make,repeat,if,ifelse,to,forward,backward,left,right,setheading,towards,setxy,penup,pendown,showturtle,hideturtle,home,clearscreen
# custom

# BASIC TOKENS
constant.token=[-]?[0-9]+
constant.class=parser.nodes.ConstantNode
constant.args=0
constant.desc=A node that contains a constant value.

variable.token=:[a-zA-z]+
variable.class=parser.nodes.VariableNode
variable.args=0
variable.desc=A node that represents a variable.

liststart.token=\\[
liststart.class=parser.nodes.ListNode
liststart.args=1
liststart.desc=A node that represents a list of nodes.

listend.token=\\]
listend.class=parser.nodes.ListEndNode
listend.args=0
listend.desc=A node that represents the end of a list of nodes.

custom.token=[a-zA-z_]+(\\?)?
custom.class=parser.nodes.CommandNode
custom.args=0
custom.desc=A node that represents a custom command. Basically a catch all.


# START MATH
sum.token=sum,\\+
sum.class=parser.commands.math.Sum
sum.args=2
sum.desc=Sums the two provided arguments together and returns the value.

difference.token=difference,\\-
difference.class=parser.commands.math.Difference
difference.args=2
difference.desc=Returns the difference of the two provided arguments.

product.token=product,\\*
product.class=parser.commands.math.Product
product.args=2
product.desc=Returns the product of the two arguments.

div.token=quotient,\\/
div.class=parser.commands.math.Quotient
div.args=2
div.desc=Returns the quotient of the two arguments.

remainder.token=remainder,\\%
remainder.class=parser.commands.math.Remainder
remainder.args=2
remainder.desc=Returns the remainder of the two arguments.

minus.token=minus,\\~
minus.class=parser.commands.math.Minus
minus.args=1
minus.desc=Returns the negative value of the argument.

random.token=random
random.class=parser.commands.math.Random
random.args=1
random.desc=Returns a random valuable between 0 and the argument supplied.
# END MATH

# START BOOLEAN
and.token=and
and.class=parser.commands.bool.And
and.args=2
and.desc=

equal.token=equal\\?,equalp
equal.class=parser.commands.bool.Equal
equal.args=2
equal.desc=

greater.token=greater\\?,greaterp
greater.class=parser.commands.bool.GreaterThan
greater.args=2
greater.desc=

less.token=less\\?,lessp
less.class=parser.commands.bool.LessThan
less.args=2
less.desc=

not.token=not
not.class=parser.commands.bool.Not
not.args=1
not.desc=

notequal.token=notequal\\?,notequalp
notequal.class=parser.commands.bool.NotEqual
notequal.args=2
notequal.desc=

or.token=or
or.class=parser.commands.bool.Or
or.args=2
or.desc=
# END BOOLEAN

# START OTHER
repeat.token=repeat
repeat.class=parser.commands.other.Repeat
repeat.args=2
repeat.desc=

make.token=make
make.class=parser.commands.other.Make
make.args=2
make.desc=

if.token=if
if.class=parser.commands.other.If
if.args=2
if.desc=

ifelse.token=ifelse
ifelse.class=parser.commands.other.IfElse
ifelse.args=3
ifelse.desc=

to.token=to
to.class=parser.commands.other.To
to.args=3
to.desc=
# END OTHER

# START TURTLE
forward.token=forward,fd
forward.class=parser.commands.turtle.commands.Forward
forward.args=1
forward.desc=

backward.token=backward,bd
backward.class=parser.commands.turtle.commands.Backward
backward.args=1
backward.desc=

left.token=left,lt
left.class=parser.commands.turtle.commands.Left
left.args=1
left.desc=

right.token=right,rt
right.class=parser.commands.turtle.commands.Right
right.args=1
right.desc=

setheading.token=setheading,seth
setheading.class=parser.commands.turtle.commands.SetHeading
setheading.args=1
setheading.desc=

towards.token=towards
towards.class=parser.commands.turtle.commands.Towards
towards.args=2
towards.desc=

setxy.token=setxy
setxy.class=parser.commands.turtle.commands.SetPosition
setxy.args=2
setxy.desc=

pendown.token=pendown,pd
pendown.class=parser.commands.turtle.commands.PenDown
pendown.args=0
pendown.desc=

penup.token=penup,pu
penup.class=parser.commands.turtle.commands.PenUp
penup.args=0
penup.desc=

showturtle.token=showturtle,st
showturtle.class=parser.commands.turtle.commands.ShowTurtle
showturtle.args=0
showturtle.desc=

hideturtle.token=hideturtle,ht
hideturtle.class=parser.commands.turtle.commands.HideTurtle
hideturtle.args=0
hideturtle.desc=

home.token=home
home.class=parser.commands.turtle.commands.Home
home.args=0
home.desc=

clearscreen.token=clearscreen,cs
clearscreen.class=parser.commands.turtle.commands.ClearScreen
clearscreen.args=0
clearscreen.desc=
# END TURTLE